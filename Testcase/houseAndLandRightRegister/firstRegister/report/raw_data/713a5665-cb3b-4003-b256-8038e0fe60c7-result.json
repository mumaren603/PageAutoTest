{"name": "test_spfFristRegister", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"btn-bg cRzQnYr\" xid=\"newTask\" __cid=\"cRzQnYr\" data-bind=\"event:{click:$model._callModelFn.bind($model, 'newTaskClick')}\" id=\"C902600BE0E0000185241DF0E6181748_newTask\">...</span> is not clickable at point (61, 12). Other element would receive the click: <span class=\"point cFNvY7v\" __cid=\"cFNvY7v\">...</span>\n  (Session info: chrome=75.0.3770.142)", "trace": "self = <Testcase.houseAndLandRightRegister.firstRegister.test_spfFirstRegister.Test_spfFirstRegister object at 0x00000000038F71C8>\nlogin = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"4f7d4d2ef3ba4bc510f4e922260c978b\")>, {'dj': 'DJJGK/DJJGK@172.0.0.250:1521/sqdj', 'qj': 'KJK/KJK@172.0.0.247:1521/sqkjk'})\ncmdopt = 'sqtest'\n\n    def test_spfFristRegister(self,login,cmdopt):\n        '''\n        :流程 国有建设用地使用权及房屋所有权--首次登记--商品房、征地拆迁安置房、经适房、房改售房（02101）\n        :param login: 装饰器，登录操作封装，返回信息：(1) webdriver对象（2）数据库配置信息 例如：(<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8c32afd6fd5c944984d9aeaadfa9341\")>,\n         {'dj': '172.0.0.247:1521/tzdj', 'qj': '172.0.0.247:1521/tzkjk'})\n        :return:\n        '''\n        self.driver = login[0]\n        dbInfo = login[1]\n        # 获取办件数据\n        bdcdyh = dataInit(dbInfo).getSpfFirstRegisterData()\n        print(\"办件受理数据为：%s\" % bdcdyh)\n    \n        # 办件中心\n>       taskCenter(self.driver).common()\n\ntest_spfFirstRegister.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\pageObject\\taskCenter.py:25: in common\n    WebTools(self.driver).mouse_click('xpath',\"//span[contains(text(),'新建任务')]\")\n..\\..\\..\\Common\\CommonFunc.py:172: in mouse_click\n    raise e\n..\\..\\..\\Common\\CommonFunc.py:152: in mouse_click\n    self.driver.find_element_by_xpath(value).click()\nd:\\tools\\python3.7.5\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nd:\\tools\\python3.7.5\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nd:\\tools\\python3.7.5\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000000036E0908>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...x76DE343D+18]\\\\n\\\\tRtlInitializeExceptionChain [0x77E99802+99]\\\\n\\\\tRtlInitializeExceptionChain [0x77E997D5+54]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"btn-bg cRzQnYr\" xid=\"newTask\" __cid=\"cRzQnYr\" data-bind=\"event:{click:$model._callModelFn.bind($model, 'newTaskClick')}\" id=\"C902600BE0E0000185241DF0E6181748_newTask\">...</span> is not clickable at point (61, 12). Other element would receive the click: <span class=\"point cFNvY7v\" __cid=\"cFNvY7v\">...</span>\nE         (Session info: chrome=75.0.3770.142)\n\nd:\\tools\\python3.7.5\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "description": "\n        :流程 国有建设用地使用权及房屋所有权--首次登记--商品房、征地拆迁安置房、经适房、房改售房（02101）\n        :param login: 装饰器，登录操作封装，返回信息：(1) webdriver对象（2）数据库配置信息 例如：(<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8c32afd6fd5c944984d9aeaadfa9341\")>,\n         {'dj': '172.0.0.247:1521/tzdj', 'qj': '172.0.0.247:1521/tzkjk'})\n        :return:\n        ", "attachments": [{"name": "查找元素错误", "source": "54fdf05f-e804-442c-a666-5531b72a1dc7-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "181222ec-8e93-4ffa-b1a0-e52d9eb61cfd-attachment.txt", "type": "text/plain"}], "start": 1596608861034, "stop": 1596608868201, "uuid": "bac2e08a-6216-4ea7-89e2-4288f06c2323", "historyId": "c92cdb22042b358fb665a98ba140af40", "testCaseId": "821dd1670ddf9b210c8b7baeaa6e77ac", "fullName": "Testcase.houseAndLandRightRegister.firstRegister.test_spfFirstRegister.Test_spfFirstRegister#test_spfFristRegister", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "Testcase.houseAndLandRightRegister.firstRegister"}, {"name": "suite", "value": "test_spfFirstRegister"}, {"name": "subSuite", "value": "Test_spfFirstRegister"}, {"name": "host", "value": "USER-20180228QV"}, {"name": "thread", "value": "20132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.houseAndLandRightRegister.firstRegister.test_spfFirstRegister"}]}